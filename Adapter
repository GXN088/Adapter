package com.java.task.task19.task1905;

import java.util.HashMap;
import java.util.Map;

/* 
Закрепляем адаптер
*/

public class Solution {
    // Статическое поле - словарь стран, где ключ - код страны, значение - полное название
    public static Map<String, String> countries = new HashMap<String, String>();

    // Статический блок инициализации для заполнения словаря стран
    static {
        countries.put("UA", "Ukraine");  // Украина
        countries.put("RU", "Russia");    // Россия
        countries.put("CA", "Canada");    // Канада
    }

    public static void main(String[] args) {
        // Основной метод пустой, так как задача демонстрационная
    }

    /**
     * Класс-адаптер, который преобразует интерфейсы Customer и Contact
     * в интерфейс RowItem (паттерн Adapter)
     */
    public static class DataAdapter implements RowItem {
        private Customer customer;  // Адаптируемый объект с информацией о клиенте
        private Contact contact;    // Адаптируемый объект с контактной информацией

        // Конструктор адаптера принимает оба адаптируемых объекта
        public DataAdapter(Customer customer, Contact contact) {
            this.customer = customer;
            this.contact = contact;
        }

        /**
         * Возвращает код страны клиента
         * Ищем в словаре countries по полному названию страны из Customer
         */
        @Override
        public String getCountryCode() {
            for (Map.Entry<String, String> entry : countries.entrySet()) {
                if (entry.getValue().equals(customer.getCountryName())) {
                    return entry.getKey();  // Возвращаем код страны (UA, RU, CA)
                }
            }
            return null;  // Если страна не найдена
        }

        /**
         * Возвращает название компании клиента
         * Просто делегируем вызов customer.getCompanyName()
         */
        @Override
        public String getCompany() {
            return customer.getCompanyName();
        }

        /**
         * Возвращает имя контакта
         * Контактное имя хранится в формате "Фамилия, Имя"
         * Разделяем строку по запятой и пробелу и берем вторую часть
         */
        @Override
        public String getContactFirstName() {
            String[] name = contact.getName().split(", ");
            return name[1];  // Имя (вторая часть после разделения)
        }

        /**
         * Возвращает фамилию контакта
         * Аналогично имени, но берем первую часть разделенной строки
         */
        @Override
        public String getContactLastName() {
            String[] name = contact.getName().split(", ");
            return name[0];  // Фамилия (первая часть после разделения)
        }

        /**
         * Возвращает строку для звонка
         * Преобразует телефонный номер в формат callto://+XXXXXXXXXX
         * Удаляет все нецифровые символы из номера (регулярное выражение \\D)
         */
        @Override
        public String getDialString() {
            return "callto://+" + contact.getPhoneNumber().replaceAll("\\D", "");
        }
    }

    /**
     * Целевой интерфейс, который мы хотим получить после адаптации
     * Определяет методы для получения:
     * - кода страны
     * - названия компании
     * - имени контакта
     * - фамилии контакта
     * - строки для звонка
     */
    public interface RowItem {
        String getCountryCode();        // Например: UA
        String getCompany();            // Например: JavaRush Ltd.
        String getContactFirstName();   // Например: Ivan
        String getContactLastName();    // Например: Ivanov
        String getDialString();         // Например: callto://+380501234567
    }

    /**
     * Интерфейс клиента (один из адаптируемых интерфейсов)
     * Содержит информацию о компании и стране
     */
    public interface Customer {
        String getCompanyName();        // Например: JavaRush Ltd.
        String getCountryName();        // Например: Ukraine
    }

    /**
     * Интерфейс контакта (второй адаптируемый интерфейс)
     * Содержит имя (в формате "Фамилия, Имя") и номер телефона
     */
    public interface Contact {
        String getName();               // Например: Ivanov, Ivan
        String getPhoneNumber();        // Например: +38(050)123-45-67
    }
}
